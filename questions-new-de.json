{
"development": {
"automation": {
"1": {
"question": "Manuelle Bereitstellung, kein Prozess oder Automatisierung",
"description": "XXX"
},
"2": {
"question": "Automatisierte Builds (CI) + manuelle Bereitstellungen mit standardisierten Prozeduren",
"description": "XXX"
},
"3": {
"question": "Automatisiertes Testen und automatisierte Bereitstellungen in Nicht-Produktion",
"description": "XXX"
},
"4": {
"question": "Continuous Delivery-Strategie (nur Release-Kandidaten werden getestet)",
"description": "XXX"
},
"5": {
"question": "Push-Button-Releases in die Produktion (Continuous Deployment und / oder Operations)",
"description": "XXX"
}
},
"methodology": {
"1": {
"question": "Keine definierte Methodik",
"description": "XXX"
},
"2": {
"question": "Definierter Wasserfallansatz",
"description": "XXX"
},
"3": {
"question": "Begrenzte agile Entwicklung bei neuen Projekten (ohne Operationen)",
"description": "XXX"
},
"4": {
"question": "Agile Methodik für Entwicklungs- und Operations-Teams",
"description": "XXX"
},
"5": {
"question": "Entwicklung und Betrieb in funktionsübergreifenden Teams (DevOps)",
"description": "XXX"
}
},
"architecture": {
"1": {
"question": "Ad-hoc-Auswahl von Anwendungsplattformen und Werkzeugen Begrenztes Verständnis für zeitgenössische Architekturansätze.",
"description": "XXX"
},
"2": {
"question": "Ausgewählte Hersteller-Technologie-Roadmap: Erstverständnis neuer Architekturen und Designs",
"description": "XXX"
},
"3": {
"question": "Iterative Entwicklung von bestehenden Anwendungen.",
"description": "Begrenzte Legacy-Strategie und Anfänge neuer Entwicklungsarchitekturen"
},
"4": {
"question": "Konzentrieren Sie sich auf neue Anwendungsplattformen und begrenzte Legacy-Plattformen.",
"description": "Gut definierte Architektur für neue Entwicklungsprojekte und Betriebsmodelle"
},
"5": {
"question": "Ganzheitliche und definierte Gesamtentwicklungsstrategie. Gute Entwürfe und Architekturen wurden eingerichtet und regelmäßig überprüft.",
"description": "XXX"
}
},
"strategy": {
"1": {
"question": "V-Style-Anforderungen sammeln (Business kommuniziert über feste IT-Anforderungen)",
"description": "XXX"
},
"2": {
"question": "Agile Anforderungen sammeln (Anforderungen entstehen bei der Projektentwicklung)",
"description": "XXX"
},
"3": {
"question": "MVP-Ansatz (inkrementeller Ansatz mit sichtbaren Rückmeldungen)",
"description": "XXX"
},
"4": {
"question": "Standardmethoden zur Entdeckung und Bewertung von Chancen",
"description": "XXX"
},
"5": {
"question": "Transparente Vision (Business kommuniziert über Geschäftsanforderungen)",
"description": "XXX"
}
},
"environment": {
"1": {
"question": "Manuelle Bereitstellung, kein Prozess oder Automatisierung",
"description": "XXX"
},
"2": {
"question": "Minimale Bereitstellung, Ad-hoc-Skripterstellung, nicht wiederholbar",
"description": "XXX"
},
"3": {
"question": "Basis-CI-Verarbeitung (Unit-Tests, manuelle Tests)",
"description": "XXX"
},
"4": {
"question": "Advanced CI,> 90% automatisiertes Testen, Pipelines, Genehmigungs-Gateways",
"description": "XXX"
},
"5": {
"question": "100% DevOps-Kooperationskultur mit energiegeladenen funktionsübergreifenden Teams und ständiger Verbesserung",
"description": "XXX"
}
}
},
"operations": {
"automation": {
"1": {
"question": "Core-Build für Betriebssystem, manuelle Ad-hoc-Bereitstellung. Kein Patching oder Automatisierung",
"description": "Maschinen werden (semi-) manuell ad-hoc bereitgestellt, möglicherweise mit Unterstützung einer Checkliste, Konfiguration manuell gesteuert. und über den Zaun geworfen zum Bewerbungsmagnetteam "
},
"2": {
"question": "Automatisierte Bereitstellung von Kernbuilds, Ad-hoc-Konfigurationsmanagement. Nur Patch-Core-Build.",
"description": "Automatischer Push-Button-Einsatz eines generischen Betriebssystems, dh nicht auf die Anwendung zugeschnitten Keine automatische Konfigurationsverwaltung Konfigurationsänderungen nach manueller und Ad-hoc-Manipulation Manuelle Koordination zwischen Betriebssystem und Anwendungspatching Das Ende-zu-Ende-Patching ist ein Ad-hoc-Prozess Betriebssystem, das von einem Team bereitgestellt und über den Zaun an das Application Management Team "
},
"3": {
"question": "Definierter Lebenszyklus eines Betriebssystems Automatisierte Bereitstellung, Konfiguration, Patches und Wartung Automatisiertes Testen und QS des Core-Builds.",
"description": "Automatischer Push-Button-Einsatz eines generischen Betriebssystems, dh nicht auf die Anwendung zugeschnitten Die Konfiguration des Betriebssystems wird über ein automatisches Konfigurationsmanagementsystem während der gesamten Lebensdauer der Maschine gesteuert. Kein Ende-zu-Ende System) Konfigurationsmanagement Automatisiertes Testen der Betriebssystembereitstellung und Konfigurationsmgmt nur Anwendungsbereitstellung & mgmt liegt außerhalb des Geltungsbereichs Kleine Koordination zwischen Betriebssystem und Anwendungspatching Das Ende-zu-Ende-Patching ist ein Ad-hoc-Prozess Betriebssystem von einem Team eingesetzt und über den Zaun an das Application Management Team geworfen "
},
"4": {
"question": "Betriebssystem wird zusammen mit der Anwendung durch Selbstbedienung bereitgestellt.",
"description": "Betriebssystem und Anwendung, die während des gesamten Maschinenlebens einheitlich mit einem automatisierten System verwaltet werden. Automatisierte End-to-End-Tests und QA von Anwendung und Betriebssystem."
},
"5": {
"question": "Die Anwendung wird zusammen mit einem minimalen Betriebssystem bereitgestellt, das ein unveränderbares Image durch Selbstbedienung verwendet.",
"description": "Automatisierter Prozess zum Erstellen und Testen von vollständig konfigurierten Images. Definierter Prozess für automatisierte Aktualisierungen an laufenden Maschinen, indem diese ohne Anwendungsausfall ersetzt werden."
}
},
"methodology": {
"1": {
"question": "Ad-hoc-reaktiv, wenig oder keine Dokumentation, strukturierter Ansatz fehlt oder ist unwirksam",
"description": "Einige Verfahren können für allgemeine Aufgaben existieren Andere Aufgaben werden vollständig ad-hoc ausgeführ, wobei die Methoden verwendet werden"
},
"2": {
"question": "Definierte Prozeduren, alle Aufgaben dokumentiert, unternehmensweite starre Sicherheitsregeln",
"description": "Definierte Prozeduren existieren für allgemeine Aufgaben Wenn eine Task angetroffen wird, für die eine Prozedur nicht existiert, wird die Prozedur zuerst dokumentiert, bevor die Aufgabe ausgeführt wird.Sicherheitsregeln sind starr, definiert als spezifische Einstellungen, die nicht leicht auf neue Technologien anwenden "
},
"3": {
"question": "Serviceorientierter Ansatz, Definierte SLAs, Dynamische Sicherheitsrichtlinien",
"description": "Zusätzlich zu der vorherigen Stufe hat jeder Service einen Service-Besitzer, der für die aktive Entwicklung des Service verantwortlich ist. Sicherheitsrichtlinien sind definiert als Ziele / Fähigkeiten, die dann vom Service-Besitzer angepasst werden, um auf den Service anwendbar zu sein. Definierte SLA: s existieren für den Dienst, einschließlich der Grenzen für geplante und ungeplante Ausfälle "
},
"4": {
"question": "Für alle Dienste oder eine Gruppe von Diensten gibt es funktionsübergreifende Teams",
"description": "Zusätzlich zur vorherigen Phase werden die Dienste von funktionsübergreifenden Teams verwaltet, die alle Aspekte des Infrastrukturbetriebs einschließlich der Anwendungsbetreiber betreffen"
},
"5": {
"question": "Die Anwendung wird mithilfe von Continuous Delivery-Methoden bereitgestellt",
"description": "In dieser Phase kommt hinzu, dass Anwendungsentwickler ebenfalls Teil der operativen Teams sind. Außerdem wird eine automatisierte CD-Methode verwendet, um die Anwendung"
}
},
"architecture": {
"1": {
"question": "Ad-hoc-Wahl zukünftiger Plattformen",
"description": "XXX"
},
"2": {
"question": "Ausgewählte Hersteller Tech Roadmap",
"description": "XXX"
},
"3": {
"question": "Fokus auf Erhalt der bestehenden Infrastruktur",
"description": "XXX"
},
"4": {
"question": "Primärer Fokus auf neue Anwendungen",
"description": "XXX"
},
"5": {
"question": "Definierte Strategie für bestehende und neue Architekturen",
"description": "XXX"
}
},
"strategy": {
"1": {
"question": "Instanzen negativer Geschäftsauswirkungen",
"description": "XXX"
},
"2": {
"question": "Gut funktionierende Service-Operationen, wenige ungeplante Ausfälle, aber langsam zu implementieren",
"description": "XXX"
},
"3": {
"question": "Projektbasierte Serviceangebote, keine ungeplanten Ausfälle und schnelle Bereitstellung",
"description": "XXX"
},
"4": {
"question": "Self-Service-Operationen für die Entwicklung und das Geschäft",
"description": "XXX"
},
"5": {
"question": "Transparente Integration mit Projekt I.T.",
"description": "XXX"
}
},
"environment": {
"1": {
"question": "Standard-Unix-Ansatz in einer stark verunreinigten Struktur",
"description": "XXX"
},
"2": {
"question": "Reactive statt Pro-Active Operations-Teams, Wasserkühler-Diskussionen werden erledigt",
"description": "XXX"
},
"3": {
"question": "Zusammenarbeit über Silos gerade erst, agile verstanden, Sinn für Dringlichkeit für Veränderung etabliert",
"description": "XXX"
},
"4": {
"question": "Kollaborative, ermächtigte, vernetzte, kleinere, funktionsübergreifende Teams.",
"description": "Open Source und innere Quelle Lösungen aktiv ermutigt Communities of Practice Bildung, neue gemeinsame Arbeitsweise etabliert"
},
"5": {
"question": "Energetisierte Cross-Functional-Teams und ständige Verbesserung.",
"description": "Positiver Wandel realisiert, Personen beigetragen, offene Organisation verstanden"
}
}
}
}
